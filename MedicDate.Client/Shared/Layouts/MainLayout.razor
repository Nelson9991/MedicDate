@inherits LayoutComponentBase
@inject IJSRuntime _jsRuntime
@inject IAuthTokenInterceptor _authTokenInterceptor
@inject IErrorInterceptor _errorInterceptor
@implements IDisposable

<RadzenHeader>
    <ChildContent>
        <AppHeader OnToggleClick="@ChangeToggle" />
    </ChildContent>
</RadzenHeader>

<div style="width: 100%" class="overflow-auto">
    <RadzenBody @ref="@body" @bind-Expanded="@bodyExpanded">
        <ChildContent>
            <RadzenContentContainer Name="main">
                @Body
            </RadzenContentContainer>
        </ChildContent>
    </RadzenBody>
</div>

<RadzenSidebar @ref="@sidebar" @bind-Expanded="@sidebarExpanded">
    <ChildContent>
        <AppSideBar />
    </ChildContent>
</RadzenSidebar>

<RadzenFooter class="bg-light">
    <ChildContent>
        <AppFooter />
    </ChildContent>
</RadzenFooter>

<RadzenDialog />
<RadzenNotification Style="position: absolute; top: 20px" />
<RadzenContextMenu />
<RadzenTooltip />

@code {
    RadzenSidebar sidebar;
    RadzenBody body;
    bool sidebarExpanded = true;
    bool bodyExpanded = false;

    protected override async Task OnInitializedAsync()
    {
        _authTokenInterceptor.RegisterEvent();
        _errorInterceptor.RegisterEvent();

        var result = await _jsRuntime.InvokeAsync<bool>("isSmWindow");

        if (result)
        {
            sidebarExpanded = false;
            bodyExpanded = true;
        }
    }

    private void ChangeToggle()
    {
        sidebarExpanded = !sidebarExpanded;
        bodyExpanded = !bodyExpanded;
    }

    public void Dispose()
    {
        _authTokenInterceptor.DisposeEvent();
        _errorInterceptor.DisposeEvent();
    }

}