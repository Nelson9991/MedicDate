@page "/usuario/changeEmail/{userId}"
@inject INotificationService _notificationService
@inject NavigationManager _navigationManager
@inject IHttpRepository _httpRepo

<div class="container">
	@if (_appUserRequest is null)
	{
		<h3>Cargando <i class="fas fa-spinner fa-spin"></i></h3>
	}
	else
	{
		<h2 class="text-radzen-primary">Actualizar Email. Usuario - @_appUserRequest.Nombre @_appUserRequest.Apellidos</h2>

		<RadzenCard>
			<EditForm Model="_changeEmailModel" OnValidSubmit="OnSubmit">
				<DataAnnotationsValidator />

				<div class="mb-3">
					<RadzenLabel Text="Email actual" />
					<div class="mt-1">
						<RadzenTextBox Value="@_appUserRequest.Email" class="w-100" ReadOnly="true" />
					</div>
				</div>

				<div class="mb-3">
					<RadzenLabel Text="Ingrese el nuevo email" />
					<div class="mt-1">
						<RadzenTextBox @bind-Value="_changeEmailModel.NewEmail" class="w-100" />
						<ValidationMessage For="() => _changeEmailModel.NewEmail" />
					</div>
				</div>

				<div class="mb-2">
					<FormButtons SaveButtonText="Enviar" NavLinkRoute="/usuarioList" />
				</div>
			</EditForm>
		</RadzenCard>

	}
</div>

@code {

	[Parameter]
	public string UserId { get; set; }

	private readonly ChangeEmailModel _changeEmailModel = new();
	private AppUserResponse _appUserRequest;

	protected override async Task OnInitializedAsync()
	{
		var httpResp = await _httpRepo.Get<AppUserResponse>($"api/Account/{UserId}");

		if (!httpResp.Error)
		{
			_appUserRequest = httpResp.Response;
			_changeEmailModel.CurrentEmail = _appUserRequest.Email;
		}
	}

	private async Task OnSubmit()
	{
		var httpResp = await _httpRepo.Post("api/Account/sendChangeEmailToken", _changeEmailModel);

		if (!httpResp.Error)
		{
			_navigationManager.NavigateTo("usuario/changeEmailConfirm");
		}
	}

}
